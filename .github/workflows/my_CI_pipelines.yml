name: Continuous Integration Dockerized Tests

on:
  push:
    branches:
      - '*'
    paths-ignore:
      - '**/*.md'  # Ignore changes to Markdown files
  pull_request:
    paths-ignore:
      - '**/*.md'  # Ignore changes to Markdown files

jobs:
  build:
    name: Build and Test  # build docker image
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:latest
        ports:
          - 2375:2375

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Build Docker Image for Tests
        run: docker build --target test --tag my-test-image .

      - name: Run Unit and Integration Tests
        run: docker run my-test-image

  security_check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Build Docker Image for Dependency Check
        run: docker build --target securityscan --tag todo-app:security .
      
      - name: Run Security checks
        run:  docker run todo-app:security    
        continue-on-error: true  # Allows the step to pass even if there are vulnerabilities

  publish:
    name: Publish Docker Image
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build --target production --tag ${{ secrets.DOCKER_USERNAME }}/my-image:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-image:latest
      
      - name: Get webhook url and run curl command
        run: |
          curl -dH --fail -X POST "${{ secrets.TERRAFORMED_WEBHOOK_URL }}"

  terraform_job:
      name: Terraform Setup, Init, and Apply
      runs-on: ubuntu-latest
      needs: [build, security_check]  # Wait for previous jobs to complete
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        TF_VAR_API_KEY: ${{ secrets.TF_VAR_API_KEY }}
        TF_VAR_API_TOKEN: ${{ secrets.TF_VAR_API_TOKEN }}
        TF_VAR_database_password: ${{ secrets.database_password }}
        TF_VAR_mongodb_connectionstring: ${{ secrets.mongodb_connectionstring }}
        TF_VAR_BOARD_ID: ${{ secrets.BOARD_ID }}
        TF_VAR_DOING_LIST_ID: ${{ secrets.DOING_LIST_ID }}
        TF_VAR_DONE_LIST_ID: ${{ secrets.DONE_LIST_ID }}
        TF_VAR_TO_DO_LIST_ID: ${{ secrets.TO_DO_LIST_ID }}
        TF_VAR_SECRET_KEY: ${{ secrets.SECRET_KEY }}
        TERRAFORMED_WEBHOOK_URL: ${{ secrets.TERRAFORMED_WEBHOOK_URL }}
      steps:
        - name: Checkout Code Repository
          uses: actions/checkout@v2

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: latest

        - name: Terraform Init
          run: |
            terraform init

        - name: Terraform Apply
          run: |
            terraform apply -auto-approve